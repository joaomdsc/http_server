* 2020/12/17

** Simulating a large Centreon installation

*** Hosts

Hosts called srvlnxNNN and srvwinNNN
Notes on hosts: db_server (x4), backend (x4), web (x4), a total of 12 servers
Host aliases 
DB hosts: transac, warehouse, historical, logging (one for each server)

*** Services (functional)

DB services: fct_transac_NNN, fct_warehouse, fct_historical, fct_logging
4 db servers, 5 services per host

Backend services: core, pricing, historization, logging (x5 on each server)

web x5 services on each host

A total of 60 services

** Host and service generation

Create a template through the UI, then use import/export mechanisms to create
object. It's unclear at this point if I'll be able to simply edit object
definition files (maybe once they've been created with the host or service id).

Use the CLI for updating the configuration:

    1. Generate config files (from what ?)
    2. Check/validate config
    3. Copy config files (to /etc/centreon-engine ?)
       3.5 Can I edit the object definitions here ?
    4. Re-start monitoring engine
    
** Check functions

Checks on hosts/services return 0 (ok) by default. They read json files
status_hosts.json and status_services.json where a different state may be
requested, this allows us to dynamically force state changes.

** Centreon CLI

General form:

    centreon -u admin -p centreon -a ACTION -v 1

where ACTION can be one of:

    pollerlist	      list pollers
    pollergenerate    generate local configuration files
    pollertest	      test monitoring engine configuration of a poller
    cfgmove	      move monitoring engine configuration files
    pollerrestart     restart monitoring engine of a poller
    applycfg	      all (of the above) in one command

** Target

Cfgmove overwrites my local changes, they must come after (losing the benefit
of test). Alternatively, I need to be sure where the config files are first
generated, and make my changes there.

/var/cache/centreon/config/engine/1

1. Generate config file
2. Inject my local changes
3. Test
4. Move
5. Restart

I injected my local changes into /var/cache/centreon/config/engine/1/hosts.cfg,
then followed with points 3 to 5. My changes are in /etc/centreon-engine, but
not in the ui. And of course, when I do another generate, my changes are
overwritten. So this doesn't work.

What I don't know is, where is the real source ? When we do "generate config
file", where does it come from ? That's where I would need to change it.

** A different approach, let's try import/export

Put notes in a host and a service through the UI:
  srvlnx007: db_server warehouse linux
  Specific service check: fct_histo db_service

Confirmed: UI saves somewhere, and pollergenerate copies from somewhere to
/var/cache.

Exporting:

[root@centreon-central ~]# centreon -u admin -p centreon -e --select='HOST;srvlnx007' --filter-type='^(HOST|SERVICE)$'
HOST;ADD;srvlnx007;backend-server-03;127.0.0.1;;Central;
HOST;setparam;srvlnx007;check_command;base_host_alive
HOST;setparam;srvlnx007;check_period;24x7
[...]
HOST;setparam;srvlnx007;host_activate;1
HOST;setparam;srvlnx007;notes;db_server warehouse linux

SERVICE;ADD;srvlnx007;Specific service check;Joao-Template
SERVICE;setparam;srvlnx007;Specific service check;check_command;check_server
SERVICE;setparam;srvlnx007;Specific service check;service_is_volatile;2
[...]
SERVICE;setparam;srvlnx007;Specific service check;service_activate;1
SERVICE;setparam;srvlnx007;Specific service check;notes;fct_histo db_service

Import:

    centreon -u admin -p centreon -i import_file.txt

and it immediately appears in the UI. Question: do I still have to go through
all the steps (gen, check, move, restart) ?

ANSWER: no, there's the 'applycfg' action which performs all of those steps, so
you can do for example:

centreon -u admin -p centreon -i /root/import.txt
centreon -u admin -p centreon -a applycfg -v 1

** Files

The user running the checks is centreon-engine, his HOME directory is
/var/lib/centreon-engine. That's where we must store the status_server.json and
status_service.json files, and that's where the checks will write their logs,
check_server.log and check_service.log.

    /var/lib/centreon-engine:
    total used in directory 80 available 16279400
    drwxr-xr-x.  4 centreon-engine centreon-engine  4096 Dec 17 23:03 .
    drwxr-xr-x. 39 root            root             4096 Apr 20  2020 ..
    prw-rw-r--   1 centreon-engine centreon-engine     0 Dec 17 16:01 central-module-master-stats.json
    -rw-rw-r--   1 centreon-engine centreon-engine     8 Dec 17 16:01 central-module-master.unprocessed
    -rw-rw-r--   1 centreon-engine centreon-engine  7107 Dec 17 23:04 check_server.log
    -rw-rw-r--   1 centreon-engine centreon-engine 37337 Dec 17 23:04 check_service.log
    drwxrwxr-x.  2 centreon-engine centreon-engine  4096 Sep 26 19:04 rw
    -rw-r--r--   1 centreon-engine centreon-engine    82 Dec 17 23:03 status_server.json
    -rw-r--r--   1 centreon-engine centreon-engine    93 Dec 17 23:03 status_service.json

--------------------------------------------------------------------------------

* 2021/01/18

Illustrating the layout of servers and services monitored by Centreon.

Preparing a presentation to demo the Centreon import into AppControl. The
layout of servers and services is shown in all_servers.vsdx (db_servers.vsdx is
just a subset). Some .png and .pptx files are derived from the .vsdx, they
don't need to be under version control.

--------------------------------------------------------------------------------

* 2021/01/27

** Centreon/Nagios configuration

/etc/centreon-engine: configuration files, including the main one. This is not
the source of the configuration, though, stuff created throught the UI gets
copied here from somewhere. So you can't add resources to the system by editing
the files here.

So when I needed a template (Joao-Template), I had to create it through the
UI. Now I find it here, in serviceTemplates.cfg:

    define service {
        service_description            Joao-Template-Alias 
        name                           Joao-Template 
        check_command                  check_service 
        check_period                   24x7 
        max_check_attempts             3 
        check_interval                 1 
        retry_interval                 1 
        register                       0 
        use                            generic-active-service 
    }

This is the only step that's necessarily manual (UPDATE: it can be automated,
see below). Once the template exists, I can use the CLI to create services
programmatically (using generate.py and the import function of the cli).

** Changes to the generate/import mechanism

This is a typical service I'm creating:

    define service {
	host_name                      srvlnx008
	service_description            fct_web19
	check_command                  check_service
	register                       1
	notes                          web_svc
	use                            Joao-Template
	_SERVICE_ID                    561
    }

The template includes a check_command, so there's no need to repeat it
here. Also, register=1 is the default, remove it. I'm keeping host, service
description, and notes, all the rest is either default or in the template.

Hosts: I'm currently not using any host templates, I should (later). Right now
I'm removing the register parameter, and everything that does not appear in the
hosts.cfg. Here's a typical host:

    define host {
        host_name                      srvlnx008
        alias                          lnx_web_server_04
        address                        127.0.0.1
        check_command                  base_host_alive
        check_period                   24x7
        notification_period            24x7
        max_check_attempts             3
        check_interval                 1
        retry_interval                 1
        register                       1
        notes                          linux web_server
        _HOST_ID                       73
    }

** Update

Service templates and checks can be created programmatically, I found them in
the export output.

CMD;add;check_service;2;python3 $USER1$/check_service.py "$HOSTNAME$" $HOSTSTATE$ "$SERVICEDESC$" $SERVICESTATE$

STPL;add;Joao-Template;Joao-Template-Alias;generic-active-service
STPL;setparam;Joao-Template;check_command;check_service
STPL;setparam;Joao-Template;check_period;24x7
STPL;setparam;Joao-Template;service_max_check_attempts;3
STPL;setparam;Joao-Template;service_normal_check_interval;1
STPL;setparam;Joao-Template;service_retry_check_interval;1
STPL;setparam;Joao-Template;service_register;0
STPL;setparam;Joao-Template;service_activate;1

** Warning

If I try to import with 'cmd' lowercase instead of 'CMD', I get a PHP error:

    [adminvivoo@Centreon ~]$ centreon -u admin -p admin -i import.txt
    PHP Fatal error:  Uncaught Error: Class '\CentreonClapi\centreon' not found in /usr/share/centreon/www/class/centreon-clapi/centreonAPI.class.php:934
    Stack trace:
    #0 /usr/share/centreon/www/class/centreon-clapi/centreonAPI.class.php(799): CentreonClapi\CentreonAPI->iniObject('cmd')
    #1 /usr/share/centreon/www/class/centreon-clapi/centreonAPI.class.php(769): CentreonClapi\CentreonAPI->launchActionForImport()
    #2 /usr/share/centreon/bin/centreon(196): CentreonClapi\CentreonAPI->import('import.txt')
    #3 {main}
      thrown in /usr/share/centreon/www/class/centreon-clapi/centreonAPI.class.php on line 934
    [adminvivoo@Centreon ~]$

** Deploying on a new server

- generate import.txt and delete.sh
  - this generates 1 check cmd, 1 stpl, then all the hosts and services
- run the import + applycfg
- copy check_service.py

(not sure if I need check_server.py ?)

Currently, user adminvivoo doesn't have enough rights to run applycfg (do it
through the UI) or to copy the check script. But all the objects have been
created. Next step would be to define a host template, and simplify all the
hosts definitions.

** Commit

Updates to generate.py before deploying to the remote server.

Simplify the definitions (remove all non required parameters, rely on the
template's values). Also, add the check command and service template.

--------------------------------------------------------------------------------

* 2021/03/24

** Analyzing Centreon exported data

We want to get a service's check command, which may be defined in an inherited
template. The current code builds on inherit.py, which used to work from the
configuration objects; it mangles the export data into the same format as
objects.json, in order to reuse the hierarchy created by inherit.py. The result
is not necessarily very good.

Most of inherit.py's code was moved to a new module called hierarchy.py, in
order to share the code with parse_export.py. The idea is to keep inherit.py
iso-functional and use only parse_export.py.

Input files that we worked on:

  - acial-export.txt: this is the (renamed) file received from Acial
  - exported_data_centreon.txt: exported from Invivoo's Centreon server

From an input file sample.txt, we run the following command:

    py parse_exports.py sample.txt

This produces several files:

  sample_cmds.txt: a csv file with data produced by the get_services()
  function, with host, service, check_command, and the command line associated
  with the check command.

  sample.xlsx: the same data, formatted as the excel file produced by
  centreon_from_api.py. This would normally be edited by the user to define
  dependencies and aggregations, before being transformed into an AppControl
  map.

  sample_hierarchy.txt: this is a tree-like representation of the derivation
  relationship between

The _cmds.txt file has many duplicates, certainly due to duplications in
acial's exports file, but maybe also due to the way the hierarchy is
constructed. Stéphane suggests it's not a hierarchy at all, because there can
be multiple inheritance - but I've never seen it. In any case:

    c:\a\src\py\tools\nagios>wc acial-export_cmds*
       4112   48848 1598416 acial-export_cmds.txt
	209    2912   74444 acial-export_cmds_nodups.txt
       4321   51760 1672860 total

There are 209 lines with SERVICE;ADD in the exports file, that's what we should
be getting in the first place (right now we get that by removing duplicates).

So the file acial-export_cmds_nodups.txt is our reference, this is what the new
code (found under koordinator/scripts and koordinator/restapi/centrex.py) needs
to produce.

** Commit

Analyzing Centreon exported data for the Acial demo on March 23rd.

Code was written to get the check commands associated to each service, which
may be defined in some template many times removed in the derivation tree. This
list of commands was later used in koordinator/scripts/acial_services.py to
generate the AppControl maps.
